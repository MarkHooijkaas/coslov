#!/usr/bin/python

import argparse
import os
import re
import sys

#####################################################################################
class CoslovCli:
    def __init__(self):
        epilogtext = '''
'''

        self.parser = argparse.ArgumentParser(
            description='Configfile and Output Stream Line Oriented Validator',
            epilog=epilogtext,
            formatter_class=argparse.RawTextHelpFormatter)
        self.parser.add_argument('-q', '--quiet',  action='store_true', help='show no informational output')
        self.parser.add_argument('-v', '--verbose',  action='store_true', help='print verbose info')
        self.parser.add_argument('-d', '--debug',  action='store_true', help='print debug info')
        self.parser.add_argument('-s', '--strict', action='store_true', help='ignore the ignores')
        self.parser.add_argument('-p', '--peek',  help='peek PEEK lines ahead')
        self.parser.add_argument('template', nargs='?', default='template.coslov', help='template file')
        self.parser.add_argument('filename', nargs='?', default=None, help='file to check')
        self.args = self.parser.parse_args()
        self.context = CoslovContext(self.args, open(self.args.filename).readlines())

    def run(self):
        context = self.context
        lines = open(context.args.template).readlines()
        template = Block(lines)
        if context.args.debug:
            template.show()
        context.debug("###############")
        template.match(context)
        exitcode=0
        for item in context.missing_items:
            exitcode = 1
            context.info("missing item: "+ str(item))
        for l in context.active_lines():
            context.info("extra line: %5d: %s"% (l.linenr, l.line))
            exitcode = 1
        sys.exit(exitcode)

############################################################
def parse_key(str):
    return re.match("^[^:]*", str).group().strip()

def parse_remainder(str):
    return re.sub("^[^:]*:", "", str).rstrip()

###########################################################################################
class LineData():
    def __init__(self, line, nr):
        self.line = line
        self.match = None
        self.linenr = nr


class CoslovContext():
    def __init__(self, args, lines):
        self.args = args
        self._linedata = []
        for index, line in enumerate(lines):
            self._linedata.append(LineData(line.rstrip(), index))
        self.missing_items = []

    def active_lines(self):
        return filter(lambda d: d.match is None, self._linedata)

    def missing(self, item, count):
        #self.warning("expected min=" + str(item.min) + ": " + str(item))
        #context.warning(str(context.line_index)+": "+context.line())
        #context.warning("expecting: " + str(self))
        self.missing_items.append(item)

    def warning(self, str):
        if self.args.quiet:
            return
        print(str)

    def info(self, str):
        if self.args.quiet:
            return
        print(str)

    def verbose(self, str):
        if self.args.quiet:
            return
        if self.args.verbose or self.args.debug:
           print(str)

    def debug(self, str):
        if self.args.quiet:
            return
        if self.args.debug:
            print(str)


##########################################################################

class Item:
    def __init__(self, options):
        if '?' in options:
            self.min=0
            self.max=1
        elif '*' in options:
            self.min=0
            self.max=99999
        elif '+' in options:
            self.min=1
            self.max=99999
        else:
            self.min=1
            self.max=1
    def show(self, indent):
        print(indent+repr(self))


############################################################

class Line(Item):
    def __init__(self, line):
        if line.startswith("@@"):  # special syntax for line that really starts with a @
            line = line[1:]
            opt = ''
        elif line.startswith("@"):
            opt = parse_key(line)[1:]
            line = parse_remainder(line)
        else:
            opt = parse_key(line)
        Item.__init__(self, opt)
        self.line=line.rstrip()

    def match(self, line, data_iterator):
        return self.line == line

    def __str__(self):
        return self.line

    def __repr__(self):
        return "Line(" + self.line + ")"

############################################################

standard_regexps = {
    'time': '[0-2][0-9]:[0-5][0-9]:[0-5][0-9]',
    'date': '[0-9][0-9][0-9][0-9]-[0-1][0-9]:[0-3][0-9]',
    'int': '[1-9][0-9]*',
    'fqdn': '[a-zA-Z0-9.]*.[a-z][a-z]+',
    'ip': '[0-9]+.[0-9]+.[0-9]+.[0-9]+',
    'any': '.*',
    'comment': '#.*',
    'comment-line': '^[ \t]*#.*',
    'empty-line': '^[ \t]*$',
}

_RE_FIND_REGEXPS=re.compile('@<[^>]*>')
class RegexpLine(Line):
    def __init__(self, origline):
        Line.__init__(self, origline)
        self.origline=origline
        prev = 0
        result = ''
        for match in _RE_FIND_REGEXPS.finditer(self.line):
            fixed = self.line[prev:match.start()]
            regexp = self.line[match.start():match.end()]
            prev = match.end()
            result += re.escape(fixed)
            if regexp.startswith("@<'") and regexp.endswith("'>"):
                 result += regexp[3:-2]
            else:
                key = regexp[2:-1]
                result += standard_regexps[key]

        result += self.line[prev:]
        self.matcher=re.compile(result)

    def __str__(self):
        return self.origline

    def __repr__(self):
        return "RegexpLine(" + self.matcher.pattern + ")*"+str(self.max)

    def match(self, line, data_iterator):
        return self.matcher.match(line)

##########################################################################

class YamlVar(Item):
    def __init__(self, line):
        Item.__init__(self, parse_key(line[:5]))
        self.var = parse_remainder(line).strip()

    def __str__(self):
        return self.var+": ..."

    def __repr__(self):
        return "YamlVar(" +self.var + ")"

    def match(self, line, data_iterator):
        if line.startswith(self.var+":"):
            indent = None
            if line.endswith('|'):
                done = False
                while not done:
                    try:
                        ldata = data_iterator.next()
                    except StopIteration:
                        done = True
                        break
                    line = ldata.line
                    if indent is None:
                        indent = ' ' * (len(line) - len(line.lstrip()))
                    if line.startswith(indent):
                        ldata.match = self
                    else:
                        done = True
            return True
        else:
            return False

##########################################################################


class Block(Item):
    def __init__(self, lines, index=0):
        Item.__init__(self, '')  # TODO: parse @block
        self.items = []
        self.ignore_items = []
        line = ''
        while index < len(lines) and not line.startswith('@end'):
            line = lines[index].rstrip()
            if line.startswith('@#'):
                pass
            elif line.startswith('@block'):
                block = Block(lines, index+1)
                self.items.append(block)
                index += len(block.items)+2
            elif line.startswith('@yaml:'):
                self.items.append(YamlVar(line))
            elif line.startswith('@ignore:'):
                self.ignore_items.append(RegexpLine(parse_remainder(line)))
            elif '@<' in line:
                self.items.append(RegexpLine(line))
            else:
                self.items.append(Line(line))
            index += 1

    def show(self, indent=''):
        for i in self.items:
            i.show(indent+'    ')

    def ignore(self, line, iterator):
        #if context.args.strict:
        #      return False
        for item in self.ignore_items:
            #print item, context.line()
            if item.match(line, iterator):
                #context.info('ignoring:' + str(item))
                #context.nextline()
                return True
        return False

    def match(self, context):
        ok = True
        for item in self.items:
            context.debug(str(item.max) + '*' + str(item) )
            cnt=0
            context.active_lines()
            iterator = iter(context.active_lines())

            done = False
            while not done:
                try:
                    ldata = iterator.next()
                except StopIteration:
                    done = True
                    break
                if cnt >= item.max:
                    break
                elif item.match(ldata.line, iterator):
                    cnt += 1
                    #print cnt, repr(item), ldata.line
                    ldata.match = item
                    ldata.count = cnt
                elif self.ignore(ldata.line, iterator):
                    pass
            if cnt < item.min:
                context.missing(item, cnt)
                ok = False
            else:
                prefix = str(cnt)
                prefix = prefix+' ' * (5-len(prefix))
                #context.verbose(prefix + " match: " + str(item) )
        return ok

############################################################

if __name__ == '__main__':
    CoslovCli().run()
