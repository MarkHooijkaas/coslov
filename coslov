#!/usr/bin/python

import argparse
import os
import re
import sys

#####################################################################################
class CoslovCli:
    def __init__(self):
        epilogtext = '''
commands:
- coslov check:   check one or more files according to a template

All commands can be abbreviated with the first letter or letters, for example to check:
- coslov c
- coslov ch
- coslov che
- coslov chec
'''

        self.allcommands = "check"
        self.parser = argparse.ArgumentParser(
            description='Configfile and Output Stream Line Oriented Validator',
            epilog=epilogtext,
            formatter_class=argparse.RawTextHelpFormatter)
        self.parser.add_argument('-q', '--quiet',  action='store_true', help='show no informational output')
        self.parser.add_argument('-v', '--verbose',  action='store_true', help='print verbose info')
        self.parser.add_argument('-d', '--debug',  action='store_true', help='print debug info')
        self.parser.add_argument('-s', '--strict', action='store_true', help='ignore the ignores')
        self.parser.add_argument('-p', '--peek',  help='peek PEEK lines ahead')
        self.parser.add_argument('command', help=self.allcommands)
        self.parser.add_argument('template', nargs='?', default='template.coslov', help='template file')
        self.parser.add_argument('filename', nargs='?', default=None, help='file to check')
        self.args = self.parser.parse_args()
        self.context = CoslovContext(self.args, open(self.args.filename).readlines())

    def command(self, name):
        if len(name) < len(self.args.command):
            return False
        return name.startswith(self.args.command)


    def run(self):
        context = self.context
        if self.command('check'):
            lines = open(context.args.template).readlines()
            template = Block(lines)
            if context.args.debug:
                template.show()
            context.debug("###############")
            template.match(context)
            if len(context.missing_items)>0:
                print(len(context.missing_items), " missing items")
                sys.exit(1)
        else:
            raise SystemExit(
                "Unknown command '%s', must be any of %s or a beginning of those letters, e.g enc for encrypt\n" %
                (self.args.command, self.allcommands)
            )

############################################################
def parse_key(str):
    return re.match("^[^:]*", str).group().strip()

def parse_remainder(str):
    return re.sub("^[^:]*:", "", str).strip()

###########################################################################################
class CoslovContext():
    def __init__(self, args, lines):
        self.args = args
        self.lines = lines
        self.line_index = 0
        self.missing_items = []
        self.extra_lines = []

    def missing(self, item, count):
        self.warning("expected min=" + str(item.min) + ": " + str(item))
        #context.warning(str(context.line_index)+": "+context.line())
        #context.warning("expecting: " + str(self))
        self.missing_items.append(item)

    def extra(self, line=None):
        if line is None:
            line = str(self.line_index) + ": " + self.line()
        self.extra_lines.appen(line)

    def warning(self, str):
        if self.args.quiet:
            return
        print(str)

    def info(self, str):
        if self.args.quiet:
            return
        print(str)

    def verbose(self, str):
        if self.args.quiet:
            return
        if self.args.verbose or self.args.debug:
           print(str)

    def debug(self, str):
        if self.args.quiet:
            return
        if self.args.debug:
            print(str)

    def line(self):
        if self.line_index >= len(self.lines):
            return None
        return self.lines[self.line_index].rstrip()

    def nextline(self):
        self.line_index += 1
        return self.line()

    def prevline(self):
        self.line_index -= 1
        return self.line()


##########################################################################

class Item:
    def __init__(self, options):
        if '?' in options:
            self.min=0
            self.max=1
        elif '*' in options:
            self.min=0
            self.max=99999
        elif '+' in options:
            self.min=1
            self.max=99999
        else:
            self.min=1
            self.max=1
    def show(self, indent):
        print(indent+repr(self))


############################################################

class Line(Item):
    def __init__(self, line):
        if line.startswith("@@"):  # special syntax for line that really starts with a @
            line = line[1:]
            opt = ''
        elif line.startswith("@"):
            opt = parse_key(line)[1:]
            line = parse_remainder(line)
        else:
            opt = parse_key(line)
        Item.__init__(self, opt)
        self.line=line.rstrip()

    def match(self, context):
        return self.line == context.line()

    def __str__(self):
        return self.line

    def __repr__(self):
        return "Line(" + self.line + ")"

############################################################

standard_regexps = {
    'time': '[0-2][0-9]:[0-5][0-9]:[0-5][0-9]',
    'date': '[0-9][0-9][0-9][0-9]-[0-1][0-9]:[0-3][0-9]',
    'int': '[1-9][0-9]*',
    'fqdn': '[a-zA-Z0-9.]*.[a-z][a-z]+',
    'ip': '[0-9]+.[0-9]+.[0-9]+.[0-9]+',
    'any': '.*',
    'comment': '#.*'
}

_RE_FIND_REGEXPS=re.compile('@<[^>]*>')
class RegexpLine(Line):
    def __init__(self, origline):
        Line.__init__(self, origline)
        self.origline=origline
        prev = 0
        result = ''
        for match in _RE_FIND_REGEXPS.finditer(self.line):
            fixed = self.line[prev:match.start()]
            regexp = self.line[match.start():match.end()]
            prev = match.end()
            result += re.escape(fixed)
            if regexp.startswith("@<'") and regexp.endswith("'>"):
                 result += regexp[3:-2]
            else:
                key = regexp[2:-1]
                result += standard_regexps[key]

        result += self.line[prev:]
        self.matcher=re.compile(result)

    def __str__(self):
        return self.origline

    def __repr__(self):
        return "RegexpLine(" + self.matcher.pattern + ")*"+str(self.max)

    def match(self, context):
        return self.matcher.match(context.line())

##########################################################################

class YamlVar(Item):
    def __init__(self, line):
        Item.__init__(self, parse_key(line[:5]))
        self.var = parse_remainder(line).strip()

    def __str__(self):
        return self.var+": ..."

    def __repr__(self):
        return "YamlVar(" +self.var + ")"

    def match(self, context):
        line = context.line()
        if line.startswith(self.var+":"):
            if line.endswith('|'):
                line=context.nextline()
                indent=' ' * (len(line) - len(line.lstrip()))
                while (line.startswith(indent)):
                    context.nextline()
                    line=context.line()
                context.prevline()
            return True
        else:
            return False

##########################################################################


class Block(Item):
    def __init__(self, lines, index=0):
        Item.__init__(self, '')  # TODO: parse @block
        self.items = []
        line = ''
        while index < len(lines) and not line.startswith('@end'):
            line = lines[index].rstrip()
            if line.startswith('@block'):
                block = Block(lines, index+1)
                self.items.append(block)
                index += len(block.items)+2
            elif line.startswith('@yaml:'):
                self.items.append(YamlVar(line))
            elif '@<' in line:
                self.items.append(RegexpLine(line))
            else:
                self.items.append(Line(line))
            index += 1

    def show(self, indent=''):
        for i in self.items:
            i.show(indent+'    ')

    def count_matches(self, item, context):
        line = context.line()
        cnt = 0
        while cnt < item.max:
            if not item.match(context):
                return cnt
            line=context.nextline()
            cnt += 1
        return cnt

    def match(self, context):
        ok = True
        for item in self.items:
            context.debug(str(item.max) + '*' + str(item) )
            cnt=self.count_matches(item, context)
            if cnt < item.min:
                context.missing(item, cnt)
                ok = False
                context.nextline()
            else:
                prefix = str(cnt)
                prefix = prefix+' ' * (5-len(prefix))
                context.verbose(prefix + " match: " + str(item) )
        return ok

############################################################

if __name__ == '__main__':
    CoslovCli().run()
